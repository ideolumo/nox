#!/usr/bin/env node
const gulp           = require('gulp')
const browserSync    = require('browser-sync').create();
const process        = require('process');


function parseOptions(args) {
  let context = {
    initCwd: process.env.INIT_CWD || process.cwd(),
    options: require('../src/default-options'),
    browserSync
  }

  for(let i=0;i<args.length;i++) {
    let arg = args[i]
    if(arg == '--cwd') {
      
    }
  
    console.log(arg)
  }

  return context
}

function help() {
  console.log(`nox [OPTIONS...] {COMMAND} [COMMAND OPTIONS]

Build a static site using nox

OPTIONS:
  --cwd         Set the folder where the nox project is. Defaults to the
                directory this command is run from.

COMMANDS:
  start                    Starts the default development environment 
  build                    Builds the project
  build-watch              Continously builds the project and watches for changes
  build-watch-sync         Same as build-watch but also runs browser-sync
  docker                   Only run the docker file without browser-sync
  clean                    Cleans the build folder
  verify <file.[pug|sass]> Verify a pug/sass file       
  run <task1> [task2...]   Run one or more (gulp) tasks. 

EXAMPLES:
  1. Starts the development web server & watches for changes, same as nox start. 
     $ nox
  
  2. Only build the website, the nox project lays in ./nox_project
     $ nox --cwd ./nox_project build

  3. Only run docker-compose
     $ nox run docker-compose
  
  4. Build the project, watch for changes and run browser-sync (without docker)
     $ nox build-watch-sync

  5. Only run docker
     $ nox docker
`)
}

// Format orchestrator errors
function formatError(e) {
  if (!e.err) {
    return e.message;
  }

  // PluginError
  if (typeof e.err.showStack === 'boolean') {
    return e.err.toString();
  }

  // Normal error
  if (e.err.stack) {
    return e.err.stack;
  }

  // Unknown (string, number, etc.)
  return new Error(String(e.err)).stack;
}

function applyLogs(gulpInstance) {
  // Exit with 0 or 1
  var failed = false;
  process.once('exit', function(code) {
    if (code === 0 && failed) {
      process.exit(1);
    }
  });

  gulpInstance.on('start', function(e) {
    // TODO: batch these
    // so when 5 tasks start at once it only logs one time with all 5
    console.log('Starting', '\'' + e.name + '\'...');
  });

  gulpInstance.on('stop', function(e) {
    console.log(
      'Finished', '\'' + e.name + '\'',
      'after', e.time);
  });

  gulpInstance.on('err', function(e) {
    failed = true;
    console.error(
      '\'' + e.name + '\'',
      'errored after',
      e.time
    );
    console.error(formatError(e));
  });

}

function main(args) {
  let context = parseOptions(args)

  require('../src/register-gulp-tasks')(context)
  applyLogs(gulp)

  let tasks = ['default']
  
  if(args.length > 0) {
    if(args[0] == 'build') {
      tasks = ['build']
    } else if(args[0] == 'build-watch') {
      tasks = ['build', 'watch']
    } else if(args[0] == 'build-watch-sync') {
      tasks = ['build', 'watch', 'browser-sync']
    } else if(args[0] == 'docker') {
      tasks = ['docker']
    } else if(args[0] == 'start') {
      tasks = ['default']
    } else if(args[0] == 'clean') {
      tasks = ['clean']
    } else if(args[0] == 'run') {
      tasks = args.slice(1)
    } else if(args[0] == 'help' || args[0] == '-h' || args[0] == '--help') {
      return help()
    } else {
      throw new Error('Unknown command ' + args[0])
    }
  }
  console.log(tasks)
  gulp['series'](tasks)(function(err) {
    if (err) {
      exit(1);
    }
  });
}

main(process.argv.slice(2));

